#Switcher by TF14 ArchTools!
#!/bin/bash
clear
echo "Switcher.sh by TF14 (github.com/K2254IVV)"
echo ""

# Switcher.sh - Simple neofetch/fastfetch distro switcher
# Check if running in Termux
if [[ -d "/data/data/com.termux/files/home" ]]; then
    CONFIG_DIR="$HOME/.config"
    TERMUX_MODE=true
else
    CONFIG_DIR="$HOME/.config"
    TERMUX_MODE=false
fi

NEOFETCH_CONF="$CONFIG_DIR/neofetch/config.conf"
FASTFETCH_CONF="$CONFIG_DIR/fastfetch/config.jsonc"

# Create config directories if they don't exist
mkdir -p "$CONFIG_DIR/neofetch"
mkdir -p "$CONFIG_DIR/fastfetch"

# Available distro presets
declare -A distros=(
    ["arch"]="Arch Linux"
    ["fedora"]="Fedora"
    ["debian"]="Debian"
    ["ubuntu"]="Ubuntu"
    ["linuxmint"]="Linux Mint"
    ["lfs"]="Linux From Scratch"
    ["gentoo"]="Gentoo"
    ["artix"]="Artix Linux"
    ["alpine"]="Alpine Linux"
    ["endeavouros"]="EndeavourOS"
    ["chromeos"]="ChromeOS"
    ["raspberrypi"]="RaspberryPi OS"
    ["android"]="Android"
    ["altlinux"]="ALT Linux"
    ["rosalinux"]="Rosa Linux"
    ["zorin"]="ZorinOS"
    ["popos"]="Pop OS"
    ["kubuntu"]="Kubuntu"
    ["windows"]="Windows"
    ["steamos"]="SteamOS"
    ["raspbian"]="Raspbian"
    ["lubuntu"]="Lubuntu"
    ["xubuntu"]="Xubuntu"
    ["ubuntu-cinnamon"]="Ubuntu Cinnamon"
    ["ubuntu-unity"]="Ubuntu Unity"
    ["arcolinux"]="Arco Linux"
    ["macos"]="MacOS"
    ["postmarketos"]="PostmarketOS"
    ["opensuse"]="OpenSUSE"
    ["ubuntu-budgie"]="Ubuntu Budgie"
    ["manjaro"]="Manjaro Linux"
    ["armbian"]="ARMbian"
    ["kali"]="Kali Linux"
    ["nixos"]="NixOS"
    ["alpine2"]="Alpine Linux"
    ["uwuntu"]="Uwuntu"
    ["arch2"]="Arch Linux"
    ["void"]="Void Linux"
    ["ubuntu-touch"]="Ubuntu Touch"
    ["ubuntu_old"]="Ubuntu"
    ["ubuntu-mate"]="Ubuntu MATE"
    ["ubuntu-gnome"]="Ubuntu GNOME"
    ["ubuntu-sway"]="Ubuntu Sway"
    ["yiffos"]="YiffOS"
    ["cachyos"]="CachyOS"
    ["armbian2"]="ARMbian"
    ["xenia"]="Xenia Linux"
    ["ubuntu-studio"]="Ubuntu Studio"
    ["ubuntu_old2"]="Ubuntu Legacy"
    ["ubuntu-kylin"]="Ubuntu Kylin"
    ["redos"]="RedOS"
    ["skiffos"]="Skiff OS"
    ["venom"]="Venom Linux"
    ["valhalla-linux"]="Valhalla Linux"
    ["vanilla"]="Vanilla Linux"
    ["steamdeck"]="SteamOS"
    ["arch2"]="Arch Linux"
    ["antix"]="AntiX Linux"
    ["apple"]="Apple"
    ["void2"]="Void Linux"
    ["amzn"]="Amazon Linux"
    ["steamdeckoled"]="SteamOS"
    ["freebsd"]="FreeBSD"
    ["vanilla2"]="Vanilla Linux"
    ["deepin"]="Deepin Linux"
    ["suse"]="SUSE"
    ["puppy"]="Puppy Linux"
    ["centos"]="CentOS"
    ["pureos"]="PureOS"
    ["puffos"]="PuffOS"
    ["wolfos"]="WolfOS"
    ["redhat"]="RedHat Linux"
    ["linux"]="Linux"
    ["ghostbsd"]="GhostBSD"
    ["nomadbsd"]="NomadBSD"
    ["bsd"]="BSD"
    ["pacbsd"]="PacBSD"
    ["gnu"]="GNU"
    ["Windows 11"]="Windows 11"
    ["Windows 10"]="Windows 10"
    ["Windows 95"]="Windows 9x"
    ["solaris"]="Solaris"
    ["qubes"]="Qubes"
    ["slackware"]="Slackware"
    ["wiilinux"]="Wii Linux"
    ["mxlinux"]="MX Linux"
    ["vzlinux"]="VZ Linux"
    ["uos"]="UOS"
    ["zos"]="z/OS"
    ["ublinux"]="UB Linux"
    ["vnux"]="Vnux"
)

# Function to set neofetch config
set_neofetch() {
    local distro=$1
    cat > "$NEOFETCH_CONF" <<EOF
#o     Config generated by Switcher.sh
lprint_info() {
    info title
    info underline

    info "OS" distro
    info "Host" model
    info "Kernel" kernel
    info "Uptime" uptime
    info "Packages" packages
    info "Shell" shell
    info "Resolution" resolution
    info "DE" de
    info "WM" wm
    info "WM Theme" wm_theme
    info "Theme" theme
    info "Icons" icons
    info "Terminal" terminal
    info "Terminal Font" term_font
    info "CPU" cpu
    info "GPU" gpu
    info "Memory" memory

    info cols
}

distro="$distro"
kernel_shorthand="on"
os_arch="off"
uptime_shorthand="on"
memory_percent="on"
package_managers="on"
shell_path="off"
shell_version="on"
speed_type="bios_limit"
speed_shorthand="on"
cpu_brand="on"
cpu_speed="on"
cpu_cores="logical"
cpu_temp="off"
gpu_brand="on"
gpu_type="all"
refresh_rate="on"
gtk_shorthand="on"
gtk2="on"
gtk3="on"
public_ip_host="http://ident.me"
public_ip_timeout=2
de_version="on"
disk_show=('/')
disk_subtitle="mount"
disk_percent="on"
music_player="auto"
song_format="%artist% - %album% - %title%"
song_shorthand="off"
colors=(distro)
bold="on"
underline_enabled="on"
underline_char="-"
separator=":"
block_range=(0 15)
color_blocks="on"
block_width=3
block_height=1
col_offset="auto"
bar_char_elapsed="-"
bar_char_total="="
bar_border="on"
bar_length=15
bar_color_elapsed="distro"
bar_color_total="distro"
cpu_display="off"
memory_display="off"
battery_display="off"
disk_display="off"
image_backend="ascii"
image_source="auto"
ascii_distro="$distro"
ascii_colors=(distro)
ascii_bold="on"
image_loop="off"
thumbnail_dir="${XDG_CACHE_HOME:-${HOME}/.cache}/thumbnails/neofetch"
crop_mode="normal"
crop_offset="center"
gap=2
yoffset=0
xoffset=0
background_color=
stdout="off"
EOF
}

# Function to set fastfetch config
set_fastfetch() {
    local distro=$1
    
    cat > "$FASTFETCH_CONF" <<EOF
{
    "$schema": "https://github.com/fastfetch-cli/fastfetch/raw/dev/doc/json_schema.json",
    "modules": [
        "title",
        "separator",
        "os",
        "host",
        "kernel",
        "uptime",
        "packages",
        "shell",
        "display",
        "de",
        "wm",
        "wmtheme",
        "theme",
        "icons",
        "terminal",
        "terminalfont",
        "cpu",
        "gpu",
        "memory",
        "colors"
    ],
    "logo": {
        "type": "builtin",
        "source": "$distro"
    }
}
EOF
}

# Parse command line arguments
SELECTED_DISTRO=""
for arg in "$@"; do
    case $arg in
        --select=*)
            SELECTED_DISTRO="${arg#*=}"
            shift
            ;;
        --help)
            echo "Usage: $0 [--select=<distro>]"
            echo "Available distros: ${!distros[@]}"
            exit 0
            ;;
    esac
done

# Main logic
if [[ -n "$SELECTED_DISTRO" ]]; then
    # Check if distro exists
    if [[ -n "${distros[$SELECTED_DISTRO]}" ]]; then
        set_neofetch "${distros[$SELECTED_DISTRO]}"
        set_fastfetch "$SELECTED_DISTRO"
        echo "Set to $SELECTED_DISTRO successfully!"
        
        # Try fastfetch if available
        if command -v fastfetch &>/dev/null; then
            echo -e "\nRunning fastfetch..."
            fastfetch
        fi
    else
        echo "Error: Unknown distro '$SELECTED_DISTRO'"
        echo "Available distros: ${!distros[@]}"
        exit 1
    fi
else
    # Interactive mode
    echo "Which distro do you want to display:"
    select distro in "${!distros[@]}"; do
        if [[ -n "$distro" ]]; then
            set_neofetch "${distros[$distro]}"
            set_fastfetch "$distro"
            break
        else
            echo "Invalid selection. Try again."
        fi
    done

    # Try fastfetch if available
    if command -v fastfetch &>/dev/null; then
        echo -e "\nRunning fastfetch..."
        fastfetch
    fi
fi
