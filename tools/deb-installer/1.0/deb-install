#!/bin/bash

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Print colored output
print_color() {
    echo -e "${2}${1}${NC}"
}

# Print header
print_header() {
    clear
    print_color "==========================================" "$PURPLE"
    print_color "   DPKG .deb Installer for Arch Linux" "$CYAN"
    print_color "==========================================" "$PURPLE"
    print_color " By TF14 "$YELLOW" (github.com/K2254IVV/ARCH-TOOLS)"
    echo
}

# Check if dpkg is installed
check_dpkg() {
    if ! command -v dpkg &> /dev/null; then
        print_color "dpkg is not installed!" "$RED"
        print_color "Installing dpkg from AUR..." "$YELLOW"
         
        # Check if yay is available
        if command -v pacman &> /dev/null; then
            sudo pacman -S dpkg --noconfirm
        elif command -v yay &> /dev/null; then
            yay -S dpkg --noconfirm
        elif command -v paru &> /dev/null; then
            paru -S dpkg --noconfirm
        else
            print_color "No AUR helper found. Please install yay or paru first." "$RED"
            print_color "Or install dpkg manually:" "$YELLOW"
            echo "git clone https://aur.archlinux.org/dpkg.git"
            echo "cd dpkg"
            echo "makepkg -si"
            exit 1
        fi
        
        if [ $? -ne 0 ]; then
            print_color "Failed to install dpkg!" "$RED"
            exit 1
        fi
    fi
}

# Extract deb package
extract_deb() {
    local deb_file="$1"
    local extract_dir="$2"
    
    print_color "Extracting $deb_file..." "$YELLOW"
    dpkg -x "$deb_file" "$extract_dir"
    
    # Extract control information
    mkdir -p "$extract_dir/DEBIAN"
    dpkg -e "$deb_file" "$extract_dir/DEBIAN"
    
    if [ $? -eq 0 ]; then
        print_color "Extraction successful!" "$GREEN"
        return 0
    else
        print_color "Extraction failed!" "$RED"
        return 1
    fi
}

# Show package info
show_package_info() {
    local extract_dir="$1"
    
    if [ -f "$extract_dir/DEBIAN/control" ]; then
        print_color "Package Information:" "$CYAN"
        echo "------------------------------------------"
        grep -E "Package|Version|Architecture|Description" "$extract_dir/DEBIAN/control" | while read -r line; do
            print_color "$line" "$BLUE"
        done
        echo "------------------------------------------"
    fi
}

# Install extracted package
install_package() {
    local extract_dir="$1"
    
    print_color "Installing package..." "$YELLOW"
    
    # Copy files to system
    if sudo cp -r "$extract_dir"/* /; then
        print_color "Files copied successfully!" "$GREEN"
        
        # Check if there are any post-install scripts
        if [ -f "$extract_dir/DEBIAN/postinst" ]; then
            print_color "Running post-installation script..." "$YELLOW"
            sudo chmod +x "$extract_dir/DEBIAN/postinst"
            sudo "$extract_dir/DEBIAN/postinst" configure
        fi
        
        return 0
    else
        print_color "Failed to copy files!" "$RED"
        return 1
    fi
}

# Check dependencies
check_dependencies() {
    local extract_dir="$1"
    
    if [ -f "$extract_dir/DEBIAN/control" ]; then
        local dependencies=$(grep "Depends:" "$extract_dir/DEBIAN/control" | cut -d: -f2- | tr -d ' ' | tr ',' ' ')
        
        if [ -n "$dependencies" ]; then
            print_color "Package dependencies: $dependencies" "$YELLOW"
            print_color "Warning: Dependencies are not automatically installed!" "$RED"
            print_color "You may need to manually install these packages." "$RED"
        fi
    fi
}

# Main function
main() {
    print_header
    check_dpkg
    
    if [ $# -eq 0 ]; then
        print_color "Usage: $0 <path-to-deb-file>" "$YELLOW"
        exit 1
    fi
    
    local deb_file="$1"
    
    if [ ! -f "$deb_file" ]; then
        print_color "File not found: $deb_file" "$RED"
        exit 1
    fi
    
    # Create temporary directory for extraction
    local temp_dir=$(mktemp -d)
    
    # Extract the deb package
    if extract_deb "$deb_file" "$temp_dir"; then
        # Show package information
        show_package_info "$temp_dir"
        
        # Check dependencies
        check_dependencies "$temp_dir"
        
        # Ask for confirmation
        read -rp "$(print_color "Do you want to install this package? (y/N): " "$CYAN")" confirm
        if [[ $confirm =~ ^[Yy]$ ]]; then
            install_package "$temp_dir"
        else
            print_color "Installation cancelled." "$YELLOW"
        fi
    fi
    
    # Clean up
    echo "rm -rf "$temp_dir""
}

# Run main function with all arguments
main "$@"
